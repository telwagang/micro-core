// <auto-generated />
using Micro_core.DataLayer;
using Micro_core.DataLayer.Models.Emuns;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Microcore.Migrations
{
    [DbContext(typeof(MicroContext))]
    partial class MicroContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Micro_core.DataLayer.Models.akiba.AkibaAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Balance");

                    b.Property<string>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<int>("StaffId");

                    b.Property<decimal>("TranscationAmount");

                    b.Property<int>("TranscationType");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.ToTable("AkibaAccounts");
                });

            modelBuilder.Entity("Micro_core.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email");

                    b.Property<int>("KeyValue");

                    b.Property<string>("Location");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("Name");

                    b.Property<int>("Tin_no");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Micro_core.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthdate");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Division");

                    b.Property<string>("Email");

                    b.Property<string>("First_Name");

                    b.Property<string>("Last_Name");

                    b.Property<string>("Middle_Name");

                    b.Property<string>("Mobile_Number");

                    b.Property<string>("Nationality");

                    b.Property<string>("Occupation");

                    b.Property<int>("StaffId");

                    b.Property<string>("Street");

                    b.Property<string>("Ward");

                    b.Property<int>("national_id");

                    b.HasKey("CustomerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Micro_core.Models.Hisa.HisaHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<int>("Hisa");

                    b.Property<int>("StaffId");

                    b.Property<string>("hisaId");

                    b.HasKey("ID");

                    b.HasIndex("StaffId");

                    b.HasIndex("hisaId");

                    b.ToTable("HisaHistory");
                });

            modelBuilder.Entity("Micro_core.Models.Hisa.HisaLimit", b =>
                {
                    b.Property<int>("CompanyId");

                    b.Property<int>("Amount");

                    b.Property<bool>("Deleted");

                    b.Property<int>("Hisa");

                    b.HasKey("CompanyId");

                    b.ToTable("HisaLimit");
                });

            modelBuilder.Entity("Micro_core.Models.Hisa.MainHisa", b =>
                {
                    b.Property<string>("CustomerId");

                    b.Property<int>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<int>("NoHisa");

                    b.HasKey("CustomerId");

                    b.ToTable("Mainhisa");
                });

            modelBuilder.Entity("Micro_core.Models.Loan.Interest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CompanyId");

                    b.Property<bool>("Deleted");

                    b.Property<int>("Duration");

                    b.Property<double>("Rate");

                    b.Property<int>("StaffId");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffId");

                    b.ToTable("Interest");
                });

            modelBuilder.Entity("Micro_core.Models.Loan.Loan", b =>
                {
                    b.Property<string>("LoanId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("CustomerId");

                    b.Property<DateTime>("Date_Sumbit");

                    b.Property<bool>("Deleted");

                    b.Property<int>("Duration");

                    b.Property<int>("ReturnAmount");

                    b.Property<int>("StaffId");

                    b.HasKey("LoanId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("Micro_core.Models.Loan.LoanApplicantion", b =>
                {
                    b.Property<string>("LoanId");

                    b.Property<bool>("Approved");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<int>("Id");

                    b.Property<int>("StaffId");

                    b.HasKey("LoanId");

                    b.ToTable("LoanApplication");
                });

            modelBuilder.Entity("Micro_core.Models.Loan.LoanBalance", b =>
                {
                    b.Property<string>("LoanId");

                    b.Property<int>("Balance");

                    b.Property<bool>("Deleted");

                    b.HasKey("LoanId");

                    b.ToTable("loanBalance");
                });

            modelBuilder.Entity("Micro_core.Models.Loan.LoanDone", b =>
                {
                    b.Property<string>("LoanId");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("Done");

                    b.HasKey("LoanId");

                    b.ToTable("LoanDone");
                });

            modelBuilder.Entity("Micro_core.Models.Loan.LoanLimit", b =>
                {
                    b.Property<int>("CompanyId");

                    b.Property<bool>("Deleted");

                    b.Property<int>("LimitAmount");

                    b.HasKey("CompanyId");

                    b.ToTable("LoanLimit");
                });

            modelBuilder.Entity("Micro_core.Models.Loan.LoanStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Deleted");

                    b.Property<string>("LoanId");

                    b.Property<int>("Monthly");

                    b.Property<DateTime>("Nextpayday");

                    b.HasKey("ID");

                    b.HasIndex("LoanId");

                    b.ToTable("LoanStatus");
                });

            modelBuilder.Entity("Micro_core.Models.Loan.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmountPaid");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<string>("LoanId");

                    b.Property<int>("StaffId");

                    b.HasKey("ID");

                    b.HasIndex("LoanId");

                    b.HasIndex("StaffId");

                    b.ToTable("LoanPayment");
                });

            modelBuilder.Entity("Micro_core.Models.Management.MemberAddmission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerId");

                    b.Property<bool>("Deleted");

                    b.HasKey("id");

                    b.HasIndex("CustomerId");

                    b.ToTable("MemberAddmission");
                });

            modelBuilder.Entity("Micro_core.Models.Reference", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("StaffID");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffID");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("Micro_core.Models.Staff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<string>("First_Name");

                    b.Property<string>("Last_Name");

                    b.Property<string>("Middle_Name");

                    b.Property<string>("Mobile_Number");

                    b.Property<string>("Position");

                    b.Property<string>("UserID");

                    b.Property<DateTime>("birthdate");

                    b.Property<string>("email");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Micro_core.DataLayer.Models.akiba.AkibaAccount", b =>
                {
                    b.HasOne("Micro_core.Models.Customer", "Customer")
                        .WithMany("Akiba")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Micro_core.Models.Staff", "Staff")
                        .WithMany("Akiba")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Micro_core.Models.Customer", b =>
                {
                    b.HasOne("Micro_core.Models.Company", "Company")
                        .WithMany("Customer")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Micro_core.Models.Staff", "Staff")
                        .WithMany("Customer")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Micro_core.Models.Hisa.HisaHistory", b =>
                {
                    b.HasOne("Micro_core.Models.Staff")
                        .WithMany("HisaHistory")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Micro_core.Models.Hisa.MainHisa", "hisa")
                        .WithMany("HisaHistory")
                        .HasForeignKey("hisaId");
                });

            modelBuilder.Entity("Micro_core.Models.Hisa.HisaLimit", b =>
                {
                    b.HasOne("Micro_core.Models.Company", "Company")
                        .WithOne("Hisalimit")
                        .HasForeignKey("Micro_core.Models.Hisa.HisaLimit", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Micro_core.Models.Hisa.MainHisa", b =>
                {
                    b.HasOne("Micro_core.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Micro_core.Models.Loan.Interest", b =>
                {
                    b.HasOne("Micro_core.Models.Company", "Company")
                        .WithMany("Interest")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Micro_core.Models.Staff", "Staff")
                        .WithMany("Interest")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Micro_core.Models.Loan.Loan", b =>
                {
                    b.HasOne("Micro_core.Models.Customer", "Customer")
                        .WithMany("loan")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Micro_core.Models.Staff", "Staff")
                        .WithMany("loan")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Micro_core.Models.Loan.LoanApplicantion", b =>
                {
                    b.HasOne("Micro_core.Models.Loan.Loan", "Loan")
                        .WithOne("LoanApplication")
                        .HasForeignKey("Micro_core.Models.Loan.LoanApplicantion", "LoanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Micro_core.Models.Loan.LoanBalance", b =>
                {
                    b.HasOne("Micro_core.Models.Loan.Loan", "Loan")
                        .WithOne("LoanBalance")
                        .HasForeignKey("Micro_core.Models.Loan.LoanBalance", "LoanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Micro_core.Models.Loan.LoanDone", b =>
                {
                    b.HasOne("Micro_core.Models.Loan.Loan", "Loan")
                        .WithOne("LoanDone")
                        .HasForeignKey("Micro_core.Models.Loan.LoanDone", "LoanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Micro_core.Models.Loan.LoanLimit", b =>
                {
                    b.HasOne("Micro_core.Models.Company", "Company")
                        .WithOne("loanLimit")
                        .HasForeignKey("Micro_core.Models.Loan.LoanLimit", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Micro_core.Models.Loan.LoanStatus", b =>
                {
                    b.HasOne("Micro_core.Models.Loan.Loan", "Loan")
                        .WithMany("LoanStatus")
                        .HasForeignKey("LoanId");
                });

            modelBuilder.Entity("Micro_core.Models.Loan.Payment", b =>
                {
                    b.HasOne("Micro_core.Models.Loan.Loan", "Loan")
                        .WithMany("payments")
                        .HasForeignKey("LoanId");

                    b.HasOne("Micro_core.Models.Staff", "Staff")
                        .WithMany("Payment")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Micro_core.Models.Management.MemberAddmission", b =>
                {
                    b.HasOne("Micro_core.Models.Customer", "customer")
                        .WithMany("memberaddmission")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Micro_core.Models.Reference", b =>
                {
                    b.HasOne("Micro_core.Models.Customer", "Customer")
                        .WithMany("Reference")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Micro_core.Models.Staff")
                        .WithMany("reference")
                        .HasForeignKey("StaffID");
                });

            modelBuilder.Entity("Micro_core.Models.Staff", b =>
                {
                    b.HasOne("Micro_core.Models.Company", "Company")
                        .WithMany("Staff")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
